snippet cb
// --------------------------------------------------------------------------
//                          - $1 -
// --------------------------------------------------------------------------
endsnippet

snippet sl
// ====----------------------------------------------------------------------
//
//
//
// $1
//
//
//
// ----------------------------------------------------------------------====
$2
endsnippet

snippet ss "the divider"
/************************* $1 *************************/
endsnippet

snippet sm "smaller section"
////////////////////////////////
// ~ $1

$2
endsnippet

snippet nn
// NOTE(madflash) - $1
endsnippet

snippet cn
// CLEAN_UP(madflash) - $1
endsnippet

snippet bt "test boilerplate"
#[cfg(test)]
mod tests {
// Note this useful idiom: importing names from outer (for mod tests) scope.
use super::*;

#[test]
fn test_add() {
		assert_eq!(add(1, 2), 3);
}

#[test]
fn test_bad_add() {
		// This assert would fire and test will fail.
		// Please note, that private functions can be tested too!
		assert_eq!(bad_add(1, 2), 3);
}
}
endsnippet

snippet bmain "boilerplate main with std::error:Error"
use std::error::Error;

fn main() -> Result<(), Box<dyn Error>> {
    $1

    Ok(())
}
endsnippet

snippet breadline "boilerplate for reading line from stdin"
let mut line = String::new();
io::stdin().read_line(&mut line)?;
endsnippet
