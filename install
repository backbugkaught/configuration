#!/usr/bin/env python3

import os
import shutil
from typing import List, TypedDict

usr_home = os.environ["HOME"]
CONFIG = {
    "nvim": "$HOME/.config/nvim",
    "bash": "$HOME",
    "zsh": "$HOME/.config/zsh",
    "tmux": "$HOME",
    "profile": "$HOME",
    "alacritty": "$HOME/.config/alacritty",
    "zathura": "$HOME/.config/zathura",
    "qtile": "$HOME/.config/qtile",
    "xmonad": "$HOME/.xmonad",
    "bin": "$HOME/.bin",
    "vifm": "$HOME/.config/vifm",
}

config = CONFIG.keys()
map_location = list(map(lambda x: x.replace("$HOME", usr_home), CONFIG.values()))
link_map = dict(zip(config, map_location))


class source_destination_pair(TypedDict):
    src: str
    dest: str


def symlink(src: str, dest: str) -> None:
    try:
        readlink = os.readlink(dest)
    except (FileNotFoundError, OSError):
        readlink = False
    if readlink:
        if readlink == src:
            print("[*] Already linked {} with {}".format(src, dest))
        else:
            if (
                input(
                    "[+] Delete already linked {} with {} [y/N] ".format(src, readlink)
                )
                == "Y"
            ):
                os.unlink(dest)
                os.symlink(src, dest)
                print("[*] linked {} with {}".format(src, dest))
    else:
        if os.path.exists(dest):
            if input("[+] Delete {} [y/N] ".format(dest)) == "Y":
                if os.path.isdir(dest):
                    shutil.rmtree(dest, ignore_errors=True)
                else:
                    os.remove(dest)
                os.symlink(src, dest)
                print("[*] linked {} with {}".format(src, dest))
        else:
            os.symlink(src, dest)
            print("[*] linked {} with {}".format(src, dest))


def get_map_for_link_in_home_dir(src, dest) -> List[source_destination_pair]:
    return_list = []
    for x in os.listdir(src):
        _tmp_map = {}
        _tmp_map["src"] = src + "/" + x
        _tmp_map["dest"] = dest + "/" + x
        return_list.append(_tmp_map)
    return return_list


def main() -> None:
    print("[*] symlinking ...")
    for (src, dest) in link_map.items():
        full_src_path = os.getcwd() + "/" + src
        if dest == usr_home:
            for _map in get_map_for_link_in_home_dir(full_src_path, dest):
                _src, _dest = _map.values()
                symlink(_src, _dest)
        else:
            symlink(full_src_path, dest)
    print("[*] (done)")


if __name__ == "__main__":
    main()
